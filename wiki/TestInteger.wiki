/  projects/integer/TestInteger.c++
// Copyright (C) 2010
// Glenn P. Downing
// Modified by: Jeff Sandford
//              Chinedu Egboh
// --------------------------------

/*
To test the program:
% g++ -ansi -pedantic -lcppunit -ldl -Wall TestInteger.c++ -o TestInteger.app
% valgrind TestInteger.app >& TestInteger.out
*/

// --------
// includes
// --------

#include <algorithm> // equal
#include <cstring> // strcmp
#include <sstream> // ostringstream
#include <stdexcept> // invalid_argument
#include <string> // ==

#include "cppunit/extensions/HelperMacros.h" // CPPUNIT_TEST, CPPUNIT_TEST_SUITE, CPPUNIT_TEST_SUITE_END
#include "cppunit/TestFixture.h" // TestFixture
#include "cppunit/TestSuite.h" // TestSuite
#include "cppunit/TextTestRunner.h" // TestRunner

#include "Integer.h"

template <typename II>
std::string printArray(II b, II e) {
        std::string result;
        while(b != e) {
                result += *b + 48;
                ++b;
        }
        return result;
}

// -----------
// TestInteger
// -----------

struct TestInteger : CppUnit::TestFixture {
    // -----------------
    // shift_left_digits
    // -----------------

    void test_shift_left_digits () {
        const int a[] = {2, 3, 4};
        const int b[] = {0, 0, 2, 3, 4};
              int x[10];
        const int* p = shift_left_digits(a, a + 3, 2, x);
        CPPUNIT_ASSERT((p - x) == 5);
        CPPUNIT_ASSERT(std::equal(const_cast<const int*>(x), p, b));}

    // ------------------
    // shift_right_digits
    // ------------------

    void test_shift_right_digits () {
        const int a[] = {2, 3, 4};
        const int b[] = {4};
              int x[10];
        const int* p = shift_right_digits(a, a + 3, 2, x);
        CPPUNIT_ASSERT((p - x) == 1);
        CPPUNIT_ASSERT(std::equal(const_cast<const int*>(x), p, b));}

    // -----------
    // plus_digits
    // -----------

    void test_plus_digits () {
        const int a[] = {2, 3, 4};
        const int b[] = {5, 6, 7};
        const int c[] = {7, 9, 1, 1};
              int x[10];
        const int* p = plus_digits(a, a + 3, b, b + 3, x);
        CPPUNIT_ASSERT(p - x == 4);
        CPPUNIT_ASSERT(std::equal(const_cast<const int*>(x), p, c));}

                void test_plus_digits_1 () {
                      const int a[] = {0};
                      const int b[] = {2, 3, 4};
                      const int c[] = {2, 3, 4};
                            int x[10];              
                      const int* p = plus_digits(a, a + 1, b, b + 3, x);
                      CPPUNIT_ASSERT(p - x == 3);
                      CPPUNIT_ASSERT(std::equal(const_cast<const int*>(x), p, c));}

                void test_plus_digits_2 () {
                      const int a[] = {2, 3, 4};
                      const int b[] = {6, 7};
                      const int c[] = {8, 0, 5};
                            int x[10];
                      const int* p = plus_digits(a, a + 3, b, b + 2, x);
                      CPPUNIT_ASSERT(p - x == 3);
                      CPPUNIT_ASSERT(std::equal(const_cast<const int*>(x), p, c));}
                
                void test_plus_digits_3 () {
                      const int a[] = {1, 1, 7};
                      const int b[] = {2, 6, 5};
                      const int c[] = {3, 7, 2, 1};
                            int x[10];
                      const int* p = plus_digits(a, a + 3, b, b + 3, x);
                      CPPUNIT_ASSERT(p - x == 4);
                      CPPUNIT_ASSERT(std::equal(const_cast<const int*>(x), p, c));}     

    // ------------
    // minus_digits
    // ------------

    void test_minus_digits () {
        const int a[] = {5, 6, 7};
        const int b[] = {8, 0, 1};
        const int c[] = {7, 5, 6};
              int x[10];
        const int* p = minus_digits(a, a + 3, b, b + 3, x);
        CPPUNIT_ASSERT(p - x == 3);
        CPPUNIT_ASSERT(std::equal(const_cast<const int*>(x), p, c));}

                void test_minus_digits_1 () {
                      const int a[] = {1, 3, 4, 5, 4, 7};
                      const int b[] = {3, 8, 0, 4, 8};
                      const int c[] = {8, 4, 3, 1, 6, 6};
                            int x[6];
                      const int* p = minus_digits(a, a + 6, b, b + 5, x);
                      CPPUNIT_ASSERT(p - x == 6);
                      CPPUNIT_ASSERT(std::equal(const_cast<const int*>(x), p, c));}
                
                 void test_minus_digits_2 () {
                      const int a[] = {1, 0, 8};
                      const int b[] = {5, 6, 7};
                      const int c[] = {6, 3, 0};
                            int x[3];
                      const int* p = minus_digits(a, a + 3, b, b + 3, x);
                      CPPUNIT_ASSERT(p - x == 3);
                      CPPUNIT_ASSERT(std::equal(const_cast<const int*>(x), p, c));}

                void test_minus_digits_3 () {
                      const int a[] = {2, 2, 2};
                      const int b[] = {1, 1, 1};
                      const int c[] = {1, 1, 1};
                            int x[10];
                      const int* p = minus_digits(a, a + 3, b, b + 3, x);
                      CPPUNIT_ASSERT(p - x == 3);
                      CPPUNIT_ASSERT(std::equal(const_cast<const int*>(x), p, c));}     

    // -----------------
    // multiplies_digits
    // -----------------

    void test_multiplies_digits () {
        const int a[] = {2, 3, 4};
        const int b[] = {5, 6, 7};
        const int c[] = {0, 8, 4, 0, 3, 3};
              int x[10];
        const int* p = multiplies_digits(a, a + 3, b, b + 3, x);
        CPPUNIT_ASSERT(p - x == 6);
        CPPUNIT_ASSERT(std::equal(const_cast<const int*>(x), p, c));}

        void test_multiplies_digits_1 () {      
                    const int a[] = {9, 9, 8, 6, 4};
                    const int b[] = {9, 3, 9, 1, 9, 2};
                    const int c[] = {1, 6, 1, 7, 4, 6, 1, 9, 6, 3, 1};
                          int x[11];
                    const int* p = multiplies_digits(a, a + 5, b, b + 6, x);
                    CPPUNIT_ASSERT(p - x == 11);
                    CPPUNIT_ASSERT(std::equal(const_cast<const int*>(x), p, c));}

        void test_multiplies_digits_2 () {
                    const int a[] = {5, 3, 6, 7, 8};
                    const int b[] = {5, 6, 7};
                    const int c[] = {5, 7, 7, 0, 4, 0, 7, 6};
                          int x[10];
                    const int* p = multiplies_digits(a, a + 5, b, b + 3, x);
                    CPPUNIT_ASSERT(p - x == 8);
                    CPPUNIT_ASSERT(std::equal(const_cast<const int*>(x), p, c));}

        void test_multiplies_digits_3 () {
                    const int a[] = {1};
                    const int b[] = {5, 6, 7};
                    const int c[] = {5, 6, 7, 0};
                          int x[10];
                    const int* p = multiplies_digits(a, a + 5, b, b + 3, x);
                    CPPUNIT_ASSERT(p - x == 4);
                    CPPUNIT_ASSERT(std::equal(const_cast<const int*>(x), p, c));}

        void test_multiplies_digits_4 () {
                    const int a[] = {0};
                    const int b[] = {5, 6, 7};
                    const int c[] = {0, 0, 0, 0};
                          int x[10];
                    const int* p = multiplies_digits(a, a + 5, b, b + 3, x);
                    CPPUNIT_ASSERT(p - x == 4);
                    CPPUNIT_ASSERT(std::equal(const_cast<const int*>(x), p, c));}

    // --------------
    // divides_digits
    // --------------

    void test_divides_digits () {
        const int a[] = {1, 3, 2, 6, 7, 8};
        const int b[] = {5, 6, 7};
        const int c[] = {5, 4, 1, 1};
              int x[10];
        const int* p = divides_digits(a, a + 6, b, b + 3, x);
        CPPUNIT_ASSERT(p - x == 4);
        CPPUNIT_ASSERT(std::equal(const_cast<const int*>(x), p, c));}

                void test_divides_digits_1 () {
                                  const int a[] = {0, 0, 0, 0, 6};
                                  const int b[] = {2, 4};
                                  const int c[] = {8, 2, 4, 1};
                                        int x[10];
                                  const int* p = divides_digits(a, a + 5, b, b + 2, x);
                                  CPPUNIT_ASSERT(p - x == 4);
                                  CPPUNIT_ASSERT(std::equal(const_cast<const int*>(x), p, c));}

                void test_divides_digits_2 () {
                                  const int a[] = {1, 3, 2, 6, 7};
                                  const int b[] = {5, 6, 7, 1, 1};
                                  const int c[] = {6};
                                        int x[10];
                                  const int* p = divides_digits(a, a + 5, b, b + 5, x);
                                  CPPUNIT_ASSERT(p - x == 1);
                                  CPPUNIT_ASSERT(std::equal(const_cast<const int*>(x), p, c));} 

    // -----------
    // constructor
    // -----------

    void test_constructor_1 () {
        try {
            const Integer<int> x("abc");
            CPPUNIT_ASSERT(false);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(strcmp(e.what(), "Integer()"));}}

    void test_constructor_2 () {
        try {
            const Integer<int> x("2");}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_constructor_3 () {
        try {
            const Integer<int> x = 2;}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_constructor_4 () {
        try {
            const Integer<int> x("-223");}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    // ---
    // abs
    // ---

    void test_abs_1 () {
        try {
            Integer<int> x = -98765;
            Integer<int>& y = x.abs();
            CPPUNIT_ASSERT( x == 98765);
            CPPUNIT_ASSERT(&x == &y);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_abs_2 () {
        try {
            const Integer<int> x = -98765;
            const Integer<int> y = abs(x);
            CPPUNIT_ASSERT(x == -98765);
            CPPUNIT_ASSERT(y == 98765);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    // --------
    // equal_to
    // --------

    void test_equal_to_1 () {
        try {
            const Integer<int> x = 98765;
            const Integer<int> y = 98765;
            CPPUNIT_ASSERT( x == y);
            CPPUNIT_ASSERT( x == 98765);
            CPPUNIT_ASSERT( 98765 == x);
            CPPUNIT_ASSERT( !(x != y));
            CPPUNIT_ASSERT( !(x != 98765));
            CPPUNIT_ASSERT(!(98765 != y));}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_equal_to_2 () {
        try {
                                                const Integer<int> x = -12723530;
                                                const Integer<int> y("-12723530");
            CPPUNIT_ASSERT( x == y);
            CPPUNIT_ASSERT( x == -12723530);
            CPPUNIT_ASSERT( -12723530 == x);
            CPPUNIT_ASSERT( !(x != y));
            CPPUNIT_ASSERT( !(x != -12723530));
            CPPUNIT_ASSERT(!(-12723530 != y));}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    // --------
    // negation
    // --------

    void test_negation () {
        try {
            const Integer<int> x = 98765;
            const Integer<int> y = -x;
            CPPUNIT_ASSERT(y == -98765);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

        void test_negation_1 () {
        try {
            const Integer<int> x = -656768;
            const Integer<int> y = -x;
            CPPUNIT_ASSERT(y == 656768);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}    

    // ------
    // output
    // ------

    void test_output_1 () {
        try {
            const Integer<int> x = 98765;
            std::ostringstream out;
            out << x;
            CPPUNIT_ASSERT(out.str() == "98765");}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

                void test_output_2 () {
        try {
            const Integer<int> x = -2129875490;
            std::ostringstream out;
            out << x;
            CPPUNIT_ASSERT(out.str() == "-2129875490");}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    // ---
    // pow
    // ---

    /*void test_pow_1 () {
        try {
            Integer<int> x = 98765;
            const int e = 9867;
            Integer<int>& y = x.pow(e);
            CPPUNIT_ASSERT( e == 9867);
            CPPUNIT_ASSERT( x == 0);
            CPPUNIT_ASSERT(&x == &y);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}*/

    void test_pow_1 () {
        try {
            Integer<int> x = 40;
            const int e = 2;
            Integer<int>& y = x.pow(e);
                                                std::cout << std::endl << y << std::endl;
            CPPUNIT_ASSERT( e == 2);
            CPPUNIT_ASSERT( x == 1600);
            CPPUNIT_ASSERT(&x == &y);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_pow_2 () {
        try {
            const Integer<int> x = 98765;
            const int e = 9867;
            const Integer<int> y = pow(x, e);
                                                std::cout << std::endl << y << std::endl;
            CPPUNIT_ASSERT(x == 98765);
            CPPUNIT_ASSERT(e == 9867);
            CPPUNIT_ASSERT(y == 0);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

        // -----------------
        // various operators
        // -----------------

    void test_less_than_1()
    {
        const Integer<int> x = -4;
        const Integer<int> y = -100;
        CPPUNIT_ASSERT(y < x && y <= x && x > y && x >= y);
    }

    void test_less_than_2()
    {
        const Integer<int> x = 4;
        const Integer<int> y = -100;
        CPPUNIT_ASSERT(y<x && y<=x && x>y && x>=y);
    }

    void test_times_equals () {
        Integer<int> x = 34578;
        Integer<int> y = 39383;
        Integer<int> result = 1361785374;
        x*=y;
        CPPUNIT_ASSERT(x == result);
    }

    void test_minus_equals_1 () {
        Integer<int> x = -4;
        Integer<int> y = 5;
        Integer<int> result = -9;
        x-=y;
        CPPUNIT_ASSERT(x == result);
    }

    void test_minus_equals_2 () {
        Integer<int> x = 4;
        Integer<int> y = -5;
        Integer<int> result = 9;
        x-=y;
        CPPUNIT_ASSERT(x == result);
    }

    void test_plus_equals_1 () {
        Integer<int> x = -4;
        Integer<int> y = 5;
        Integer<int> result = 1;
        x += y;
        CPPUNIT_ASSERT(x == result);
    }

    void test_plus_equals_2 () {
        Integer<int> x = -5;
        Integer<int> y = -4;
        Integer<int> result = -9;
        x+=y;
        CPPUNIT_ASSERT(x == result);
    }

    void test_divides_equals_1 () {
        Integer<int> x = 20;
        Integer<int> y = 5;
        Integer<int> result = 4;
        x/=y;
        CPPUNIT_ASSERT(x == result);
    }


    void test_divides_equals_2 () {
        Integer<int> x = -605;
        Integer<int> y = -5;
        Integer<int> result = 121;
        x/=y;
        CPPUNIT_ASSERT(x == result);
    }

    void test_mod_equals () {
        Integer<int> x = -60;
        Integer<int> y = 8;
        Integer<int> result = -4;
        x %= y;
        CPPUNIT_ASSERT(x == result);
    }

    void test_left_shift_equals () {
        Integer<int> x = 8;
        int y = 3;
        Integer<int> result = 8000;
        x<<=y;
        CPPUNIT_ASSERT(x == result);
    }

    void test_right_shift_equals () {
        Integer<int> x = 300;
        int y = 2;
        Integer<int> result = 3;
        x>>=y;
        CPPUNIT_ASSERT(x == result);
    }

    // -----
    // suite
    // -----

    CPPUNIT_TEST_SUITE(TestInteger);
    CPPUNIT_TEST(test_shift_left_digits);
    CPPUNIT_TEST(test_shift_right_digits);
    CPPUNIT_TEST(test_plus_digits);
    CPPUNIT_TEST(test_plus_digits_1);
    CPPUNIT_TEST(test_plus_digits_2);
    CPPUNIT_TEST(test_plus_digits_3);
    CPPUNIT_TEST(test_minus_digits);
    CPPUNIT_TEST(test_minus_digits_1);
    CPPUNIT_TEST(test_minus_digits_2);
    CPPUNIT_TEST(test_minus_digits_3);
    CPPUNIT_TEST(test_multiplies_digits);
    CPPUNIT_TEST(test_multiplies_digits_1);
    CPPUNIT_TEST(test_multiplies_digits_2);
    CPPUNIT_TEST(test_divides_digits);
    CPPUNIT_TEST(test_divides_digits_1);
    CPPUNIT_TEST(test_divides_digits_2);
    CPPUNIT_TEST(test_constructor_1);
    CPPUNIT_TEST(test_constructor_2);
    CPPUNIT_TEST(test_constructor_3);
    CPPUNIT_TEST(test_constructor_4);
    CPPUNIT_TEST(test_abs_1);
    CPPUNIT_TEST(test_abs_2);
    CPPUNIT_TEST(test_equal_to_1);
    CPPUNIT_TEST(test_equal_to_2);
    CPPUNIT_TEST(test_negation);
    CPPUNIT_TEST(test_negation_1);
    CPPUNIT_TEST(test_output_1);
    CPPUNIT_TEST(test_output_2);
    CPPUNIT_TEST(test_pow_1);
    CPPUNIT_TEST(test_pow_2);
    CPPUNIT_TEST(test_less_than_1);
    CPPUNIT_TEST(test_less_than_2);
    CPPUNIT_TEST(test_times_equals);
    CPPUNIT_TEST(test_plus_equals_1);
    CPPUNIT_TEST(test_plus_equals_2);
    CPPUNIT_TEST(test_minus_equals_1);
    CPPUNIT_TEST(test_minus_equals_2);
    CPPUNIT_TEST(test_divides_equals_1);
    CPPUNIT_TEST(test_divides_equals_2);
    CPPUNIT_TEST(test_mod_equals);
    CPPUNIT_TEST(test_left_shift_equals);
    CPPUNIT_TEST(test_right_shift_equals);
    CPPUNIT_TEST_SUITE_END();};

// ----
// main
// ----

int main () {
    using namespace std;
    ios_base::sync_with_stdio(false); // turn off synchronization with C I/O
    cout << "TestInteger.c++" << endl;

    CppUnit::TextTestRunner tr;
    tr.addTest(TestInteger::suite());
    tr.run();

    cout << "Done." << endl;
    return 0;}